**DVWA之命令执行漏洞
##Command Injection
----常用的cmd命令
---whoami                            查看当前用户名
---ipconfig                          查看网卡信息
---shutdown -s -t 0                  关机
---net user[username][password]/add  增加一个用户名为username密码为password的新用户
---type[file_name]                   查看filename文件内容

##命令执行防御 low
----源代码

<?php

if( isset( $_POST[ 'Submit' ]  ) ) {
    // Get input
    $target = $_REQUEST[ 'ip' ];//将输入的ip赋值给变量$target

    // Determine OS and execute the ping command.
    if( stristr( php_uname( 's' ), 'Windows NT' ) ) {
        // Windows
        $cmd = shell_exec( 'ping  ' . $target );//shell_exec:通过shell环境执行命令，并且将完整的输出以字符串的方式返回
    }
    else {
        // *nix
        $cmd = shell_exec( 'ping  -c 4 ' . $target );
    }

    // Feedback for the end user
    echo "<pre>{$cmd}</pre>";
}

?>

##Command Injection 防御 medium
----源代码：
<?php

if( isset( $_POST[ 'Submit' ]  ) ) {
    // Get input
    $target = $_REQUEST[ 'ip' ];//将输入的ip赋值给变量$target

    // Set blacklist
    $substitutions = array( //如果用户输入内容含有&&或;则将符号删去
        '&&' => '',
        ';'  => '',
    );

    // Remove any of the characters in the array (blacklist).
    $target = str_replace( array_keys( $substitutions ), $substitutions, $target );

    // Determine OS and execute the ping command.
    if( stristr( php_uname( 's' ), 'Windows NT' ) ) {
        // Windows
        $cmd = shell_exec( 'ping  ' . $target );//shell_exec:通过shell环境执行命令，并且将完整的输出以字符串的方式返回
    }
    else {
        // *nix
        $cmd = shell_exec( 'ping  -c 4 ' . $target );
    }

    // Feedback for the end user
    echo "<pre>{$cmd}</pre>";
}

?>

----渗透测试解决方法
---白盒测试：可以看到源代码，查看源代码过滤机制
---黑盒测试：看不到源代码，依次尝试常见命令连接符
----DVWA medium防御中过滤了&&和;并不会影响其它符号正常使用

##command Injection 防御 high
----源代码
<?php

if( isset( $_POST[ 'Submit' ]  ) ) {
    // Get input
    $target = trim($_REQUEST[ 'ip' ]);//将输入的ip赋值给变量$target

    // Set blacklist
    $substitutions = array(  //如果用户输入内容含有&&、;、| 、-、$、(、)、|| 则将符号删去
        '&'  => '',
        ';'  => '',
        '| ' => '',
        '-'  => '',
        '$'  => '',
        '('  => '',
        ')'  => '',
        '`'  => '',
        '||' => '',
    );

    // Remove any of the characters in the array (blacklist).
    $target = str_replace( array_keys( $substitutions ), $substitutions, $target );

    // Determine OS and execute the ping command.
    if( stristr( php_uname( 's' ), 'Windows NT' ) ) {
        // Windows
        $cmd = shell_exec( 'ping  ' . $target );//shell_exec:通过shell环境执行命令，并且将完整的输出以字符串的方式返回
    }
    else {
        // *nix
        $cmd = shell_exec( 'ping  -c 4 ' . $target );
    }

    // Feedback for the end user
    echo "<pre>{$cmd}</pre>";
}

?>

---DVWA high防御中缺少对 |的检测，代码中是|[空格]并不会影响|正常使用

##Command Injection 防御 impossible
----源代码
<?php

if( isset( $_POST[ 'Submit' ]  ) ) {
    // Check Anti-CSRF token
    checkToken( $_REQUEST[ 'user_token' ], $_SESSION[ 'session_token' ], 'index.php' );

    // Get input
    $target = $_REQUEST[ 'ip' ];
    $target = stripslashes( $target );

    // Split the IP into 4 octects
    $octet = explode( ".", $target );

    // Check IF each octet is an integer  //这里做了后端格式验证，具体分析
    if( ( is_numeric( $octet[0] ) ) && ( is_numeric( $octet[1] ) ) && ( is_numeric( $octet[2] ) ) && ( is_numeric( $octet[3] ) ) && ( sizeof( $octet ) == 4 ) ) {
        // If all 4 octets are int's put the IP back together.
        $target = $octet[0] . '.' . $octet[1] . '.' . $octet[2] . '.' . $octet[3];

        // Determine OS and execute the ping command.
        if( stristr( php_uname( 's' ), 'Windows NT' ) ) {
            // Windows
            $cmd = shell_exec( 'ping  ' . $target );
        }
        else {
            // *nix
            $cmd = shell_exec( 'ping  -c 4 ' . $target );
        }

        // Feedback for the end user
        echo "<pre>{$cmd}</pre>";
    }
    else {
        // Ops. Let the user name theres a mistake
        echo '<pre>ERROR: You have entered an invalid IP.</pre>';
    }
}

// Generate Anti-CSRF token
generateSessionToken();

?>

---1.strictpslashes去除用户输入的\
---2.explode把用户输入的数据分开，比如输入127.0.0.1会被分成四个部分分别是127 0 0 1
---3.分别判断分成的四个部分是不是数字，127是不是？0是不是？0是不是？1是不是？有不是数字的直接不允许访问
---4.把验证完是数字的四个数字再用，拼接起来，变成正常的IP 127.0.0.1

----impossible的防御正如其名，不可能被攻击，是开发人员的典范，其他后端语言也可实现相应算法

